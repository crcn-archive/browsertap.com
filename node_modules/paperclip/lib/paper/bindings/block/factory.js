// Generated by CoffeeScript 1.7.0
(function() {
  var Binder, BindingCollection, Clip, Factory, bindingClasses, loaf;

  BindingCollection = require("../collection");

  loaf = require("loaf");

  Clip = require("../../../clip");

  bindingClasses = {
    html: require("./html"),
    "if": require("./conditional"),
    "else": require("./conditional"),
    elseif: require("./conditional"),
    value: require("./value")
  };

  Binder = (function() {

    /*
     */
    function Binder(options) {
      this.options = options;
    }


    /*
     */

    Binder.prototype.getNode = function() {
      var _base;
      return typeof (_base = this.options["class"]).getNode === "function" ? _base.getNode(this.options) : void 0;
    };


    /*
     */

    Binder.prototype.prepare = function() {
      var _base;
      return typeof (_base = this.options["class"]).prepare === "function" ? _base.prepare(this.options) : void 0;
    };


    /*
     */

    Binder.prototype.init = function() {
      return this._path = this.path();
    };


    /*
     */

    Binder.prototype.getBinding = function(templateNode) {
      var clazz, cn, index, key, ops, _i, _len, _ref;
      cn = templateNode;
      while (cn.parentNode) {
        cn = cn.parentNode;
      }
      _ref = this._path;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        index = _ref[_i];
        cn = cn.childNodes[index];
      }
      clazz = this.options["class"];
      ops = {
        node: cn,
        clip: new Clip({
          script: this.options.script,
          watch: false,
          application: this.options.application
        })
      };
      if (this.options.section) {
        ops.section = loaf(this.options.section.nodeFactory, cn, cn.nextSibling);
      }
      for (key in this.options) {
        if (ops[key] != null) {
          continue;
        }
        ops[key] = this.options[key];
      }
      return new clazz(ops);
    };


    /*
     */

    Binder.prototype.path = function() {
      var child, children, cn, paths, _i, _len, _ref;
      if (this._path) {
        return this._path;
      }
      paths = [];
      cn = this.options.node || this.options.section.start;
      while (cn.parentNode) {
        children = [];
        _ref = cn.parentNode.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          children.push(child);
        }
        paths.unshift(Array.prototype.slice.call(children, 0).indexOf(cn));
        cn = cn.parentNode;
      }
      return this._path = paths;
    };

    return Binder;

  })();

  Factory = (function() {
    function Factory() {}


    /*
     */

    Factory.prototype.getBinder = function(options) {
      var bd, clipScriptNames, scriptName, _i, _len;
      clipScriptNames = options.script.fn ? ["value"] : Object.keys(options.script);
      for (_i = 0, _len = clipScriptNames.length; _i < _len; _i++) {
        scriptName = clipScriptNames[_i];
        if (bd = bindingClasses[scriptName]) {
          options.scriptName = scriptName;
          options["class"] = bd;
          if (typeof bd.prepare === "function") {
            bd.prepare(options);
          }
          return new Binder(options);
        }
      }
    };


    /*
     */

    Factory.prototype.register = function(name, bindingClass) {
      return bindingClasses[name] = bindingClass;
    };

    return Factory;

  })();

  module.exports = new Factory();

}).call(this);
