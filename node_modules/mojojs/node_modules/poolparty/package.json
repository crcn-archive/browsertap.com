{
  "name": "poolparty",
  "version": "0.0.5",
  "description": "poolparty.js was created to reduce the overhead of creating expensive objects such as views, dom elements, etc. It's used in [paperclip.js](/classdojo/paperclip.js), and [mojo.js](/classdojo/mojo.js).",
  "main": "./lib/index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha --reporter min"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/classdojo/poolparty.js.git"
  },
  "devDependencies": {
    "mocha": "1.8.x",
    "expect.js": "0.2.x",
    "benchmark": "~1.0.0",
    "protoclass": "0.0.2",
    "coveralls": "~2.6.1",
    "istanbul": "~0.2.3"
  },
  "author": "",
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "5ea0f204528d657f05c7f27782c4d6a6384819f9",
  "dependencies": {
    "protoclass": "0.0.x"
  },
  "readme": "### Object Pooling & Recycling [![Alt ci](https://travis-ci.org/classdojo/poolparty.js.png)](https://travis-ci.org/classdojo/poolparty.js)\n\npoolparty.js was created to reduce the overhead of creating expensive objects such as views, dom elements, etc. It's used in [paperclip.js](/classdojo/paperclip.js), and [mojo.js](/classdojo/mojo.js).\n\n\nFirst create an object that you want to add to the pool party:\n\n```javascript\n\nvar poolParty = require(\"poolparty\");\n\nfunction SomeView (options) {\n  this.reset(options);\n}\n\n\nSomeView.prototype.render = function () {\n  // do something\n}\n\nSomeView.prototype.reset = function (options) {\n  // reset options on the view\n}\n\nSomeView.prototype.dispose = function () {\n  SomeView.pool.add(this);\n}\n\n\nSomeView.pool = poolParty({\n  create: function (options) {\n    return new SomeView(options);\n  },\n  recycle: function (someView, options) {\n    someView.reset(options);\n  }\n});\n\n\nmodule.exports = SomeView;\n```\n\nNext, use it:\n\n```javascript\nvar SomeView = require(\"./someView\");\n\n// create the view\nvar view = SomeView.pool.create({});\n\n// do stuff\nview.render();\n\n// we're done with the view, dispose it\nview.dispose();\n\n// call \"create\" again - it's the same view.\nconsole.log(SomeView.pool.create({}) === view); // true\n```\n\n\n### API\n\n#### pool poolparty(options)\n\n- `max` - the max number of objects allowed in a pool\n- `min` - minimum number of items to use in the pool\n- `keepAliveTimeout` - the number of MS before destroying a stale object\n- `factory` - the function which creates a pool object\n- `recycle` - called whenever an object is recycled\n\n\n### pool.size()\n\nreturns the size of the pool\n\n### pool.drip()\n\nremoves one item from the pool\n\n### pool.drain()\n\nremoves all items from the pool except the min\n\n### object pool.add(item)\n\nAdds an object to the pool\n\n### object pool.create(options)\n\ncreates, or uses a recycled object\n\n\n### object.dispose()\n\ndisposes the object, and adds it back to the object pool\n\n\n\n",
  "bugs": {
    "url": "https://github.com/classdojo/poolparty.js/issues"
  },
  "_id": "poolparty@0.0.5",
  "_from": "poolparty@0.0.5"
}
