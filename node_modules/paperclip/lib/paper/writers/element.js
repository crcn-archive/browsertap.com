// Generated by CoffeeScript 1.7.0
(function() {
  var ElementWriter, nodeBindingFactory, type,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  nodeBindingFactory = require("../bindings/node/factory");

  type = require("type-component");

  ElementWriter = (function(_super) {
    __extends(ElementWriter, _super);

    function ElementWriter() {
      this.write = __bind(this.write, this);
      return ElementWriter.__super__.constructor.apply(this, arguments);
    }


    /*
     */

    ElementWriter.prototype.write = function(name, attributes, children) {
      var attrName, child, element, value, _i, _len, _ref;
      if (attributes == null) {
        attributes = {};
      }
      if (children == null) {
        children = [];
      }
      element = this.nodeFactory.createElement(name);
      for (attrName in attributes) {
        value = attributes[attrName];
        if (typeof value === "object") {
          continue;
        }
        element.setAttribute(attrName, value);
      }
      (_ref = this.binders).push.apply(_ref, nodeBindingFactory.getBinders({
        node: element,
        nodeName: name,
        application: this.application,
        attributes: attributes
      }));
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        element.appendChild(child);
      }
      return element;
    };

    return ElementWriter;

  })(require("./base"));

  module.exports = ElementWriter;

}).call(this);
