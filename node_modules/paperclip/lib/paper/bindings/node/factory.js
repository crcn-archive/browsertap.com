// Generated by CoffeeScript 1.7.0
(function() {
  var Binder, NodeBindingFactory, allBindingClasses, bdble, classes, clazz, dataBind, defaultBindingClasses, nodeFactory, type, _, _i, _len;

  bdble = require("bindable");

  _ = require("underscore");

  allBindingClasses = {
    node: {},
    attr: {
      "default": []
    }
  };

  Binder = (function() {

    /*
     */
    function Binder(options) {
      this.options = options;
    }


    /*
     */

    Binder.prototype.init = function() {};


    /*
     */

    Binder.prototype.getBinding = function(templateNode) {
      var clazz, cn, index, _i, _len, _ref;
      cn = templateNode;
      while (cn.parentNode) {
        cn = cn.parentNode;
      }
      _ref = this.path();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        index = _ref[_i];
        cn = cn.childNodes[index];
      }
      clazz = this.options["class"];
      return new clazz(_.extend({}, this.options, {
        node: cn
      }));
    };


    /*
     */

    Binder.prototype.path = function() {
      var child, children, cn, paths, _i, _len, _ref;
      if (this._path) {
        return this._path;
      }
      paths = [];
      cn = this.options.node;
      while (cn.parentNode) {
        children = [];
        _ref = cn.parentNode.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          children.push(child);
        }
        paths.unshift(children.indexOf(cn));
        cn = cn.parentNode;
      }
      return this._path = paths;
    };

    return Binder;

  })();

  NodeBindingFactory = (function() {
    function NodeBindingFactory() {}


    /*
     */

    NodeBindingFactory.prototype.getBinders = function(options) {
      var attrName, attributes, bindable, bindables, binders, bindingClass, bindingClasses, context, node, nodeName, _i, _j, _len, _len1;
      binders = [];
      attributes = options.attributes;
      nodeName = options.nodeName;
      node = options.node;
      bindables = [
        {
          name: nodeName,
          key: nodeName,
          value: node,
          type: "node",
          node: node
        }, {
          name: nodeName,
          key: "default",
          value: node,
          type: "node",
          node: node
        }
      ];
      context = void 0;
      for (attrName in attributes) {
        bindables.push({
          node: node,
          name: attrName,
          key: attrName,
          value: attributes[attrName],
          type: "attr"
        });
        bindables.push({
          node: node,
          name: attrName,
          key: "default",
          value: attributes[attrName],
          type: "attr"
        });
      }
      for (_i = 0, _len = bindables.length; _i < _len; _i++) {
        bindable = bindables[_i];
        bindingClasses = allBindingClasses[bindable.type][bindable.key] || [];
        for (_j = 0, _len1 = bindingClasses.length; _j < _len1; _j++) {
          bindingClass = bindingClasses[_j];
          if (bindingClass.prototype.test(bindable)) {
            bindable["class"] = bindingClass;
            bindable.application = options.application;
            binders.push(new Binder(bindable));
          }
        }
      }
      return binders;
    };


    /*
     */

    NodeBindingFactory.prototype.register = function(name, bindingClass) {
      var classes, type;
      type = bindingClass.type || bindingClass.prototype.type;
      if (!/node|attr/.test(String(type))) {
        throw new Error("node binding class \"" + bindingClass.name + "\" must have a type 'node', or 'attr'");
      }
      classes = allBindingClasses[type];
      if (!bindingClass.prototype.test) {
        bindingClass.prototype.test = function() {
          return true;
        };
      }
      if (!classes[name]) {
        classes[name] = [];
      }
      classes[name].push(bindingClass);
      return this;
    };

    return NodeBindingFactory;

  })();

  nodeFactory = module.exports = new NodeBindingFactory();

  defaultBindingClasses = {
    "default": [require("./attrs/text")],
    "data-bind": [dataBind = module.exports.dataBind = require("./attrs/dataBind")]
  };

  for (type in defaultBindingClasses) {
    classes = defaultBindingClasses[type];
    for (_i = 0, _len = classes.length; _i < _len; _i++) {
      clazz = classes[_i];
      nodeFactory.register(type, clazz);
    }
  }

}).call(this);
