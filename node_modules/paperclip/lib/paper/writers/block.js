// Generated by CoffeeScript 1.7.0
(function() {
  var BlockWriter, Clip, blockBindingFactory, loaf,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  loaf = require("loaf");

  blockBindingFactory = require("../bindings/block/factory");

  Clip = require("../../clip");

  BlockWriter = (function(_super) {
    __extends(BlockWriter, _super);

    function BlockWriter() {
      this.write = __bind(this.write, this);
      return BlockWriter.__super__.constructor.apply(this, arguments);
    }


    /*
     */

    BlockWriter.prototype.write = function(script, contentFactory, childBlockFactory) {
      var binder, childTpl, node, ops, tpl;
      tpl = contentFactory ? this.template.creator(contentFactory, this.application) : void 0;
      childTpl = childBlockFactory ? this.template.creator(childBlockFactory, this.application) : void 0;
      this.binders.push(binder = blockBindingFactory.getBinder(ops = {
        script: script,
        template: tpl,
        application: this.application,
        childBlockTemplate: childTpl
      }));
      node = binder.getNode(ops) || this.getDefaultNode(ops);
      binder.prepare(ops);
      return node;
    };


    /*
     */

    BlockWriter.prototype.getDefaultNode = function(ops) {
      var section;
      ops.section = section = loaf(this.nodeFactory);
      return section.render();
    };

    return BlockWriter;

  })(require("./base"));

  module.exports = BlockWriter;

}).call(this);
