{
  "name": "bindable",
  "version": "0.5.26",
  "description": "bindable.js ===========",
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha",
    "benchmark": "node benchmark"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/classdojo/bindable.js.git"
  },
  "author": "",
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "7edb2889d669a6f42b537b50772f9e86cf6337f1",
  "dependencies": {
    "dref": "0.1.x",
    "disposable": "0.0.x",
    "underscore": "~1.4.4",
    "hoist": "0.0.x",
    "toarray": "0.0.1",
    "outcome": "0.0.x",
    "type-component": "0.0.x",
    "async": "0.2.x",
    "protoclass": "0.0.5",
    "sift": "0.0.12"
  },
  "devDependencies": {
    "mocha": "1.8.x",
    "expect.js": "0.2.x",
    "structr": "0.2.x",
    "sift": "0.0.9",
    "sardines": "0.4.x",
    "karma": "0.8.x",
    "benchmark": "~1.0.0",
    "istanbul": "~0.2.1",
    "coveralls": "~2.6.0"
  },
  "readme": "# Bindable.js [![Alt ci](https://travis-ci.org/classdojo/bindable.js.png)](https://travis-ci.org/classdojo/bindable.js)\n\nIncredibly flexible, fast bi-directional data binding library for `objects`, and `collections`. \n\n## Projects using bindable.js\n\n- [Paperclip.js](/classdojo/paperclip.js) - data-bindable templating engine.\n- [Sherpa.js](/classdojo/sherpa.js) - online tours library\n- [Mojo.js](/classdojo/mojo.js) - javascript framework.\n- [AWSM](/crcn/node-awsm) - aws library.\n\n### Benchmark\n\nBindable.js is pretty fast. Here are a few benchmarks on a Mac 2.3 GHz Intel Core i7 with 16 GB (1600 MHz DDR3) of memory.\n\n```\nbindable.on('event', fn) 1 listener x 10,139,631 ops/sec ±0.47% (94 runs sampled)\nbindable.on('event', fn) 2 listeners x 3,524,177 ops/sec ±0.32% (95 runs sampled)\nbindable.bind('name', { to: fn }).dispose() x 602,661 ops/sec ±1.96% (85 runs sampled)\nbindable.bind('name', fn).dispose() x 1,220,053 ops/sec ±0.57% (92 runs sampled)\nbindable.bind('city.zip', fn).dispose() x 266,628 ops/sec ±1.01% (87 runs sampled)\nsub bindable.bind('friend.name', fn).dispose() x 176,746 ops/sec ±1.04% (88 runs sampled)\nbindable.bind('a.b.c.d.e', fn).dispose() x 143,059 ops/sec ±0.77% (91 runs sampled)\nnew bindable.Object() x 17,267,440 ops/sec ±0.72% (91 runs sampled)\nbindable.get('firstName') x 14,650,011 ops/sec ±1.06% (88 runs sampled)\nbindable.get('city.zip') x 5,896,941 ops/sec ±1.25% (91 runs sampled)\nbindable.get('a.b.c') x 5,056,329 ops/sec ±0.97% (82 runs sampled)\nbindable.get('a.b.c.d') x 4,661,307 ops/sec ±0.91% (90 runs sampled)\nbindable.get(['city','zip']) x 28,287,374 ops/sec ±1.37% (81 runs sampled)\nbindable.set('firstName', value) x 13,668,137 ops/sec ±0.98% (88 runs sampled)\nbindable.set(['city', 'zip'], 55555) new x 1,895,868 ops/sec ±0.66% (95 runs sampled)\nbindable.set(['city', 'zip'], 55555) existing x 1,939,437 ops/sec ±0.77% (86 runs sampled)\nbindable.set('city.zip', 94111) new x 1,416,434 ops/sec ±0.69% (90 runs sampled)\nbindable.set('city.zip', 94111) existing x 1,426,653 ops/sec ±0.85% (86 runs sampled)\n```\n\n\n## BindableObject Example\n\n```javascript\nvar bindable = require(\"bindable\");\n\nvar item = new bindable.Object({\n  name: \"craig\",\n  last: \"condon\",\n  location: {\n    city: \"San Francisco\"\n  }\n});\n\nitem.bind(\"location.zip\", function(value) {\n  // 94102\n}).now();\n\n//triggers the binding\nitem.set(\"location.zip\", \"94102\"); \n\n\n\n//bind location.zip to another property in the model, and do it only once\nitem.bind(\"location.zip\", { to: \"zip\", max: 1 }).now();\n\n//bind location.zip to another object, and make it go both ways!\nitem.bind(\"location.zip\", { target: anotherModel, to: \"location.zip\", bothWays: true }).now();\n\n//chain to multiple items, and limit it!\nitem.bind(\"location.zip\", { to: [\"property\", \"anotherProperty\"], max: 1}).now();\n\n\n//you can also transform data as it's being bound\nitem.bind(\"name\", {\n  to: \"name2\",\n  map: function (name) {\n    return name.toUpperCase();\n  }\n})now();\n\n```\n\n## API\n\n\n#### value bindable.get(property)\n\nReturns a property on the bindable object\n\n```javascript\nvar bindable = new bindable.Object({ city: { name: \"SF\" } });\n\nconsole.log(bindable.get(\"city\"));      // { name: \"SF\" }\nconsole.log(bindable.get(\"city.name\")); // SF\n```\n\n#### bindable.set(property, value)\n\nSets a value to the bindable object\n\n```javascript\nvar obj = new bindable.Object();\nbindable.set(\"city.name\", \"SF\");\nconsole.log(obj.get(\"city.name\")); // SF\n```\n\n#### bindable.has(property)\n\nReturns true if the bindable object has a given property\n\n```javascript\nvar obj = new bindable.Object({ count: 0, male: false, name: \"craig\" });\n\nconsole.log(obj.has(\"count\")); // true\nconsole.log(obj.has(\"male\")); // true\nconsole.log(obj.has(\"name\")); // true\nconsole.log(obj.has(\"city\")); // false\n```\n\n#### Object bindable.context()\n\nreturns the context of the bindable object.\n\n```javascript\nvar context = {};\nvar obj     = new bindable.Object(context);\n\nconsole.log(obj.context() == context); // true\n```\n\n#### binding bindable.bind(from, to)\n\nCreates a new binding object.\n\n```javascript\nvar obj = new bindable.Object({ name: \"craig\" });\n\n//bind to name2\nobj.bind(\"name\", \"name2\").now();\n\n//same as above, different style.\nobj.bind(\"name\", { to: \"name2\" }).now();\n```\n\n\n#### binding.now()\n\nExecutes a binding now\n\n```javascript\nvar person = new bindable.Object({ name: \"jeff\" });\nperson.bind(\"name\", function (name) {\n  // called ~ name = jeff\n}).now();\nperson.set(\"\")\n```\n\n#### binding.dispose()\n\nDisposes a binding\n\n```javascript\nvar person = new bindable.Object({ name: \"jeff\" });\n\nvar binding = person.bind(\"name\", function (name) {\n  // called ~ name = jeff\n}).now();\n\nbinding.dispose();\n\nperson.set(\"name\", \"jake\"); // binding not triggered\n```",
  "bugs": {
    "url": "https://github.com/classdojo/bindable.js/issues"
  },
  "_id": "bindable@0.5.26",
  "_from": "bindable@0.5.x"
}
