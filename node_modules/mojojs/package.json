{
  "name": "mojojs",
  "version": "0.7.74",
  "description": "modular mv+ JavaScript framework for node, and the web",
  "main": "./lib/index.js",
  "jam": {
    "baseUrl": "public",
    "packageDir": "public/vendor",
    "dependencies": {
      "jquery": "1.7.x",
      "jquery-transit": "*",
      "underscore": "*",
      "events": "0.0.x",
      "async": "0.2.x"
    },
    "config": {
      "repository": "http://npm.classdojo.com:5984/jam",
      "paths": {
        "templates": "public/templates"
      }
    }
  },
  "scripts": {
    "test": "make test-node"
  },
  "keywords": [
    "mojo-plugin"
  ],
  "repository": {
    "url": "git://github.com/classdojo/mojo.js.git"
  },
  "dependencies": {
    "type-component": "0.0.x",
    "bindable": "0.5.x",
    "janitorjs": "0.0.4",
    "factories": "0.0.x",
    "loaf": "0.2.x",
    "nofactor": "0.0.x",
    "bindable-decor-bindings": "0.1.x",
    "underscore": "~1.4.4",
    "mojo-paperclip": "0.3.x",
    "protoclass": "0.0.5",
    "subindable": "0.1.x",
    "runlater": "0.0.2",
    "poolparty": "0.0.5"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "paperclip": "0.3.x",
    "jsdom": "~0.8.9",
    "mocha": "~1.15.1",
    "istanbul": "~0.1.46",
    "coveralls": "~2.5.0",
    "benchmark": "~1.0.0",
    "browserify": "~3.24.2"
  },
  "readme": "<p align=\"center\">\n  <a href=\"http://mojojs.com\">\n    <img src=\"https://s3.amazonaws.com/uploads.hipchat.com/12139/74559/TgjXBU1QpgjVwc0/mojo-js.png\">\n  </a>\n</p>\n\n[![Alt ci](https://travis-ci.org/classdojo/mojo.js.png)](https://travis-ci.org/classdojo/mojo.js)\n[![Alt ci](https://coveralls.io/repos/classdojo/mojo.js/badge.png?branch=0.7.x)](https://coveralls.io/r/classdojo/mojo.js)\n\nMojo.js is a JavaScript framework for building Single Page Applications, or static websites in [Node.js](http://nodejs.org/). It's inspired by [Angular.js](http://angularjs.org/), [Derby.js](http://derbyjs.com/), [Knockout.js](http://knockoutjs.com/), [Meteor.js](http://www.meteor.com/), [Ember.js](http://emberjs.com/), [jQuery](http://jquery.com/), [Backbone.js](http://backbonejs.org/), and many other JavaScript, and non-JavaScript frameworks. Much of the design was inspired by Backbone.js, and Node.js. The core is small, while third-party modules allow you to customize Mojo depending on your requirements. \nMojo was built initially to phase out old code, and itself - hence the modularity. The philosophy behind Mojo is to allow you to build on top of your old code base, and slowly strangle out your old application until you have a new, highly maintainable application. \n\n### Features\n\n- Supported in all major browsers: `IE 8+`, `Firefox`, `Chrome`, `Safari`, and `Opera`.\n- Supported in Node.js. Run the same code on the front-end & backend. See the [mojo site source code](https://github.com/classdojo/mojojs.com) for an example. \n- Flexible bi-directional data-bindings. \n- Plays nicely with other frameworks such as Backbone.js, Spine.js, and jQuery. Easily build new application code on top of old code.\n- No magic. No assumptions. Mojo.js was built around explicitness and modularity.\n- 100% JavaScript - [paperclip.js](https://github.com/classdojo/paperclip.js) templates are also translated to JavaScript.\n- Small core. Modules make up the rest. \n  - Decorators are core - they control everything from computed properties, creating children of a view, and even setting up templates. There are a few built-in decorators (for now - we'll take them out later): `drag & drop`, `paperclip.js` (template), `bindings` (computed properties), `transition`, and `events` (Backbone style). You can also [create your own](#custom-decorators) if you want to extend the core, but there isn't a single decorator that's required for Mojo.js to function properly. \n  - The framework itself is broken into multiple repositories - this makes it easier to encapsulate, re-use bits of functionality.\n\n### Core Libraries\n\n- [bindable.js](https://github.com/classdojo/bindable.js) - data-binding layer.\n- [paperclip.js](https://github.com/classdojo/paperclip.js) - template engine.\n- [loaf.js](https://github.com/classdojo/loaf.js) - controls sections, or virtual document fragments.\n- [flatstack](https://github.com/classdojo/flatstack.js) - queue for rendering / removing views.\n\n\n### Examples:\n\n- [Hello World](http://jsfiddle.net/BZA8K/16/)\n- [Hello Input](http://jsfiddle.net/BZA8K/17/)\n- [Todo List](http://jsfiddle.net/BZA8K/18/)\n- [Dynamic Templates](http://jsfiddle.net/BZA8K/20/)\n- [States Component](http://jsfiddle.net/BZA8K/28/)\n- [Custom Components](http://jsfiddle.net/BZA8K/24/)\n- [Transitions](http://jsfiddle.net/BZA8K/22/)\n- [dots benchmark](http://jsfiddle.net/BZA8K/42/)\n\n### TODO:\n\n- route docs\n- API docs\n- starter kit\n- testing docs\n- style guidlines\n\n### Installation\n\nYou can get started with Mojo.js by installing the [starter kit](http://github.com/classdojo/mojo-starter). In terminal run:\n\n```bash\ngit clone git@github.com:classdojo/mojo-starter.git && cd mojo-starter && npm install;\n```\n\n## View Usage\n\nViews extend [bindable](http://github.com/classdojo/bindable.js) objects. The best way to create a view is to first create a sub-class, then instantiate it. For example:\n\n```javascript\nvar SubView = mojo.View.extend({\n  name: \"craig\"\n});\nvar view = new SubView();\nconsole.log(view.get(\"name\")); //craig\n```\n\n#### view.attach(selector)\n\nRenders, and adds the view to the specific DOM element. [Here's an example](http://jsfiddle.net/BZA8K/12/):\n\n```javascript\nvar view = new mojo.View({\n  paper: paperclip.compile(\"hello!\")\n});\nview.attach($(\"#application\"));\n```\n\n#### view.render(callback)\n\nRenders the view. [For example](http://jsfiddle.net/BZA8K/14/):\n\n```javascript\nvar view = new mojo.View({\n  paper: paperclip.compile(\"hello!\")\n});\nview.render(function() {\n  alert(view.section.toString());\n});\n```\n\n#### view.section\n\nThe [loaf section](https://github.com/classdojo/loaf.js). This is where everything is rendered to.\n\n#### view.remove(callback)\n\nRemoves the view from the DOM.\n\n#### view.callstack\n\nthe queue for rendering / removing views. This is particularly useful if you need to perform an action before a view is completely rendered, or removed. [Transitions](https://github.com/classdojo/mojo.js/blob/master/src/views/base/decor/transition.coffee) are a good example.\n\n#### view.emit(event [, data...])\n\nemits an event\n\n#### view.on(event, listener)\n\nlistener for an event. For example:\n\n```javascript\nvar view = new mojo.View();\nview.on(\"hello\", function() {\n  \n});\nview.emit(\"hello\"); //trigger listener\n```\n\n#### view.bubble(event [, data...])\n\nbubbles an event up to the root view.\n\n#### view.parent\n\nreference to the parent view\n\n#### events\n\n- `render` - emitted when `view.render()` is called.\n- `rendered` - emitted after the view has been rendered.\n- `remove` - emitted when `view.remove()` is called.\n- `removed` - emitted after the view has been removed.\n- `dispose` - emitted when the view is being disposed.\n\n\n#### protected methods\n\nMojo.js has a few methods you can override if you need to something durring render / remove. \n\n```javascript\nvar view = new mojo.View({\n  _onRender: function() {\n    //called on render\n  },\n  _onRendered: function() {\n    //called on rendered\n  },\n  _onRemove: function() {\n    //called on remove\n  },\n  _onRemoved: function() {\n    //called on removed\n  }\n});\n```\n\n\n## View Decorators\n\nDecorators are extensions to the Mojo.js framework - they help you describe how your view should function, but aren't necessary for Mojo.js to work. Therefore, you can easily mix decorators, or even [create your own](#custom-decorators). This design was picked to allow you, the coder to pick whatever style suites you best. There are however a few built-in decorators that might help you get started. \n\n\n### Templates\n\nBy default, Mojo.js uses [paperclip.js](https://github.com/classdojo/paperclip.js) for the template engine. [Here's a basic example](http://jsfiddle.net/BZA8K/5/):\n\n```javascript\nvar view = new mojo.View({\n  paper: paperclip.compile(\"hello world!\")\n});\nview.attach($(\"#application\"));\n```\n\nYou can also dynamically change the template. Say for instance you want to change the template depending on a model type, [here's what you can do](http://jsfiddle.net/BZA8K/20/):\n\n```javascript\n\nvar templates = {\n    notice  : paperclip.compile(\"notice\"),\n    default : paperclip.compile(\"notice\"),\n    warning : paperclip.compile(\"warning\"),\n    error   : paperclip.compile(\"error\")\n};\n\nvar NotificationView = mojo.View.extend({\n    \"bindings\": {\n        \"model.type\": {\n            \"paper\": {\n                \"map\": function(type) {\n                    return templates[type] || templates.default;\n                 }\n             }\n         }\n     }                                  \n});\n\nvar alertView = new NotificationView({ model: new bindable.Object({ type: \"alert\" }) });\nvar photoView = new NotificationView({ model: new bindable.Object({ type: \"photo\" }) });\n```\n\nYou can add your own template - just create a [custom decorator](#custom-decorators).\n\n### Bindings\n\nThe bindings decorator is similar to Ember's computed properties feature. [For example](http://jsfiddle.net/BZA8K/21/):\n\n```javascript\nvar TestView = mojo.View.extend({\n  paper: paperclip.compile(\"hello-world\"),\n  bindings: {\n      \n      //join first & last name\n      \"firstName, lastName\": {\n          \"fullName\": {\n              \"map\": function(firstName, lastName) {\n                  return [firstName, lastName].join(\" \");\n              }\n          }\n      },\n      \n      //uppercase & lowercase fullName\n      \"fullName\": {\n          \"fullNameUpper\": {\n              \"map\": function(fullName) {\n                  return String(fullName).toUpperCase();\n              }\n          },\n          \"fullNameLower\": {\n              \"map\": function(fullName) {\n                  return String(fullName).toLowerCase();\n              }\n          }\n      },\n      \n      //wait for fullNameUpper to change\n      \"fullNameUpper\": function(fullNameUpper) {\n          console.log(\"CHANGE!\");\n      }\n  }\n});\n\n//init view somewhere\n```\n\n### Transitions\n\nPretty self explainatory - transitions allow you to ease a view into a particular state, whether entering, or exiting. Note that transitions require [jquery.transit](http://ricostacruz.com/jquery.transit/). [Here's an example](http://jsfiddle.net/BZA8K/22/): \n\n```javascript\nvar HelloView = mojo.View.extend({\n\n    paper: paperclip.compile(\"notice\"),\n\n    transition: {\n\n        enter: {\n            from: { opacity: 0, top: \"-10px\", position: \"relative\" },\n            to: { opacity: 1, top: \"0px\" }\n        },\n\n        exit: {\n            to: { opacity: 0, top: \"10px\" }\n        }\n    }\n});\n\nvar view = new HelloView();\nview.attach($(\"#application\"));\n```\n\n\n### Sections\n\n\nSections are what make up your application - they allow you to break down your app into smaller, more modular pieces. [Here's a basic example](http://jsfiddle.net/BZA8K/23/): \n\n```javascript\n//views/main/header/logo.js\nvar LogoView = mojo.View.extend({\n    paper: paperclip.compile(\"header-logo\")\n});\n\n//views/main/header/index.js\nvar HeaderView = mojo.View.extend({\n    paper: paperclip.compile(\"header\"),\n    sections: {\n        logo: LogoView\n    }\n});\n\n//views/main/content/index.js\nvar ContentView = mojo.View.extend({\n    paper: paperclip.compile(\"content\")\n});\n\n//views/main/index.js\nvar MainView = mojo.View.extend({\n    paper: paperclip.compile(\"main\"),\n    sections: {\n        header: HeaderView,\n        content: ContentView\n    }\n});\n\nvar mainView = new MainView();\nmainView.attach($(\"#application\"));\n```\n\nMojo comes with a few built-in components: [lists](#list-component), and [states](#states-component).\n\n### List Component\n\nList of views. [Here's an example](http://jsfiddle.net/BZA8K/18/):\n\n```javascript\nvar TodosView = mojo.View.extend({\n  todos: todoCollection,\n  sections: {\n    items: {\n      type: \"list\",\n      source: \"todos\",\n      modelViewClass: TodoView\n    }\n  }\n})\n```\n\nNote that each model item in the source collection is assigned as `model` for each list item.\n\n#### list.filter(fn)\n\nFilters the list. For example:\n\n```javascript\nvar TodosView = mojo.View.extend({\n  todos: todoCollection,\n  sections: {\n    items: {\n      type: \"list\",\n      source: \"todos\",\n      modelViewClass: TodoView,\n\n      //filter items that are NOT done.\n      filter: function(model) {\n        return !model.get(\"done\");\n      }\n    }\n  }\n});\n```\n\n#### list.sort(fn)\n\nSorts the list. For example:\n\n```javascript\nvar TodosView = mojo.View.extend({\n  todos: todoCollection,\n  sections: {\n    items: {\n      type: \"list\",\n      source: \"todos\",\n      modelViewClass: TodoView,\n      sort: function(a, b) {\n        return a.get(\"priority\") > b.get(\"priority\") ? -1 : 1;\n      }\n    }\n  }\n});\n```\n\n### States Component\n\nThe states component allow you to toggle between multiple views. This is useful if you want to introduce something like routes into your application. [Here's an example](http://jsfiddle.net/BZA8K/27/):\n\n```javascript\nvar MainView = mojo.View.extend({\n  sections: {\n    pages: {\n      type: \"states\", \n      index: 0,\n      views: [\n        { class: ContactView , name: \"contact\" },\n        { class: HomeView    , name: \"home\"    }\n      ]\n    }\n  }\n})\n```\n\n### states.index\n\nthe current index of the state. [For example](http://jsfiddle.net/BZA8K/29/): \n\n```javascript\nvar MainView = mojo.View.extend({\n  sections: {\n    pages: {\n      type: \"states\", \n      index: 0,\n      views: [\n        { class: ContactView , name: \"contact\" },\n        { class: HomeView    , name: \"home\"    }\n      ]\n    }\n  }\n});\n\nvar view = new MainView();\nconsole.log(view.get(\"sections.pages.index\")); //0\n```\n\n### Custom Components\n\nMojo.js allows you to register your own components. [Here's a basic example](http://jsfiddle.net/BZA8K/24/):\n\n```javascript\n//views/main/header/logo.js\nvar HelloView = mojo.View.extend({\n    paper: paperclip.compile(\"hello\")\n});\n\nmojo.models.set(\"components.hello\", HelloView);\n\nvar MainView = mojo.View.extend({\n    paper: paperclip.compile(\"main\"),\n    sections: {\n        hello1: {\n            type: \"hello\",\n            message: \"craig\"\n        },\n        hello2: {\n            type: \"hello\",\n            message: \"john\"\n        }\n    }\n});\n\nvar mainView = new MainView();\nmainView.attach($(\"#application\"));\n```\n\nNote that options provided for each section are automatically set to the component being created. The above equivalent might be:\n\n```javascript\nvar view = new HelloView({\n  message: \"john\"\n});\n```\n\n### Custom Decorators\n\nThere are some cases you might want to add your own decorator. Say for instance you want to add your own custom template engine. [No problem](http://jsfiddle.net/BZA8K/30/):\n\ndecorator:\n\n```javascript\nvar handlebarsDecorator = {\n\n    //returns the handlebar options. This decorator is ignore if the options are \n    //undefined\n    getOptions: function(view) {\n        return view.handlebars;\n    },\n\n    //decorates the view with the given options\n    decorate: function(view, sourceName) {\n\n        //compile the template\n        var template = Handlebars.compile($(\"script[data-template-name='\" + sourceName + \"']\").html());\n\n        //wait for the view to render, then add the elements\n        view.on(\"render\", function() {\n\n            //temporary placeholder for the elements - use innerHTML to compile the template.\n            var div       = document.createElement(\"div\");\n            div.innerHTML = template(view.context());\n\n            //append JUST the child nodes to the view section\n            view.section.append.apply(view.section, div.childNodes);\n        });\n    }\n}\n\nmojo.decorator(handlebarsDecorator);\n```\n\nusage: \n\n```javascript\nvar MainView = mojo.View.extend({\n    name       : \"craig\",\n    handlebars : \"main\"\n});\n```\n\n## models singleton\n\nAllows for models to be referenced anywhere in the application. [See the variable scope example]().\n\n## Property Scope\n\nChild views inherit properties from the parent view, just like variable scope in JavaScript. Therefore, you should always `define` properties you want to use within your views. [For example](http://jsfiddle.net/BZA8K/31/):\n\n```javascript\nvar user = new mojo.bindable.Object({\n    name: \"john\"\n});\n\nmojo.models.set(\"user\", user);\n\nvar HeaderView = mojo.View.extend({\n    paper: paperclip.compile(\"header\")\n});\n\nvar MainView = mojo.View.extend({\n    define: [\"user\"],\n    paper: paperclip.compile(\"main\"),\n    bindings: {\n        \"models.user\": \"user\"\n    },\n    sections: {\n        header: HeaderView\n    }\n});\n\n\nvar view = new MainView();\nview.attach($(\"#application\"));\n```\n\n[Checkout what happens](http://jsfiddle.net/BZA8K/32/) when we define `user` in HeaderView. Notice that `user` isn't inherited anymore, and remains `undefined`. \n\n\n\n\n\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/classdojo/mojo.js/issues"
  },
  "_id": "mojojs@0.7.74",
  "_from": "mojojs@"
}
